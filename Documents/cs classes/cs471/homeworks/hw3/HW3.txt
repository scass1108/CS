/*
      CS471 - Programming Languages
        Assignment #3 due: 2/18/14
        Author: Casserly, Shawn (scasser1@binghamton.edu)
        Date: 2/18/14
        
Credits: Q 1,5,9,10 github/amarshall
	 Q 6 UIowa slides on prolog        
       
 */

/* Purpose:
 * to practice writing relations in Prolog

   This assignment is not intended to be hard, however many will need
   time to absorb how easy it really is. One problem requires only one line,
   most require only two lines and none require more than 3 lines.
 */

/*1: Read 3.1.3 Example 3: Successor from "Learn Prolog Now!"

http://cs.union.edu/~striegnk/learn-prolog-now/html/node27.html#subsec.l3.ex3

    Define a predicate convertToDecimal(Succ, Decimal), which converts the
    succ representation for numbers to decimal representation.
i.e.
  ?- convertToDecimal(succ(succ(succ(succ(succ(0))))),N).
  N = 5.
  ?- convertToDecimal(S,4).
  S = succ(succ(succ(succ(0)))) .

*/
	numeral(0).
	numeral(succ(X)) :- numeral(X).

	convertToDecimal(0, 0).
	convertToDecimal(succ(S), N) :- convertToDecimal(S, N1), N is N1 + 1.
	
	
	example code: HW3.pl

/*2: Define a predicate add(Succ1, Succ2, SUMSucc), which adds two
     numbers in succ notations and the result is in succ notation.  
     DO NOT convert succ notation to decimal.  You may assume
     only succ notation is used by the query.
     ie.
     ?- add(succ(succ(succ(succ(succ(0))))), succ(succ(0)), Sum).
     Sum = succ(succ(succ(succ(succ(succ(succ(0))))))).

     ?- add(succ(succ(0)), succ(succ(succ(0))), Sum).
     Sum = succ(succ(succ(succ(succ(0))))).

     ?- add(succ(succ(0)), OP, succ(succ(succ(0)))).
     OP = succ(0)
     
  */
  	
	
	add(0,0,0).
	add(X, Y, S) :- convertToDecimal(X,X1), convertToDecimal(Y,Y1), S1 is X1 + Y1, convertToDecimal(S, S1).
	
	
	example code: HW3.pl


/* 3: Using solution from problem 2 define minus(Succ1, Succ2, Diff).
      You may assume the Succ1 is larger than Succ2.
      ie. 
      ?- minus(succ(succ(succ(succ(succ(0))))), succ(succ(0)), Diff).
      Diff = succ(succ(succ(0))).
      
*/
	minus(0,0,0).
	minus(X,Y,S) :- convertToDecimal(X,X1), convertToDecimal(Y,Y1), S1 is X1 - Y1, convertToDecimal(S,S1).
	
	
	example code: HW3.pl

/*4: Define a predicate sameLen(Lst1, Lst2), such that it succeeds if lists
     Lst1 and Lst2 have the same length.  Use a recursive definition.  DO NOT USE
     the built in predicate  "length". e.g.
          ?- sameLen([1,2,3],[1,2]).
          No
          ?- sameLen([1,2,3],[a,b,c]).
         Yes
  */
	size([],0).
	size([H|T],N):- size(T,N1), N is N1 + 1. 

	sameLen([],[]).
	sameLen(L1,L2) :- size(L1, A), size(L2, B), A = B.
	
	example code: HW3.pl

/* 5: Define a clause hasSubseq(L,S), such that it succeeds if the list L contains 
      the list S as a sequence. Use recursive definition.
      e.g. 
      ?-hasSubseq([a,g,b,d],[g,b]). 
      Yes 
      ?- hasSubseq([a,g,b,d],[g,d]). 
      yes
      ?- hasSubseq([a,g,b,d],[b,g]).
      no
      
   */
	hasSubseq([],[]).
	hasSubseq([_|X], Y) :- hasSubseq(X,Y).
	hasSubseq([A|X], [B|Y]):- A = B, hasSubseq(X,Y).
	
	
	example code: HW3.pl

/* 6: Define the "prefix" predicate so that "prefix(X,Y)" says that 
      X is a list that is a prefix of Y.  That is, each element of X 
      unifies with the corresponding element of Y, but Y may contain 
      additional elements after that.  Check that your predicate works 
      when X is uninstantiated: given a query like "prefix(X,[1,2,3]), it 
      should find all the prefixes of the list [1,2,3] (after each result
      use ":" instead of return).
      e.g.
       ?- prefix(X,[a,b,c]).
       X = [] ;
       X = [a] ;
       X = [a, b] ;
       X = [a, b, c] ;
       No
*/
	
	prefix([],_).
	prefix([H|Y], [H|T]) :- prefix(Y,T).
	
	
	example code: HW3.pl

/* 7: point(X,Y) is the structure which represents a point.  Write a fact
     "origin" which succeeds if both X and Y are zero.
    e.g. 
      ?- origin(P).
    succeeds if P is a point with x = 0 and y = 0.
 */

	origin(P):- P = point(0,0).
	
	example code: HW3.pl
	
/* 8: Define a relation "inside(p,r)" which is true if and only if
     point p lies inside a circle or radius r.
     This relation can be defined as:
       inside(point(x,y),r) if and only if x^2 + y^2 < r^2 
 */

	inside(P,R) :-  P = point(X,Y),  X^2 + Y^2 < R^2.
	
	
	example code: HW3.pl

/* 9: init(Lst, InitOfLst) succeeds if InitOfLst is the same as Lst except the
     last element of Lst is missing. i.e.
     ?- init([a,b,c,d,e],Init).
     Init= [a, b, c, d]
     Yes
 */
	init([_], []).
	init([A|X],[A|Y]) :- init(X,Y).

	example code: HW3.pl

/*10: Define the procedure 'zip' so that zip(Lst1,Lst2,Zipped) succeeds if
     Zipped is a list of sequences (tuples) . The first value of the sequence
     is from the corresponding position from Lst1 and the second value is from
     corresponding position from Lst2. Note: The length of Zipped will be the
     minimum of the length of Lst1 and length of Lst2. e.g.
           ?- zip([1,2,3,4],[a,b,c],Z).
           Z = [ (1, a), (2, b), (3, c)]
           Yes
           ?- zip([a],[1,2,3,4],Z).
           Z = [ (a, 1)]
           Yes
*/
	zip(_,[],[]).
	zip([],_,[]).
	zip([A|X],[B|Y], [(A,B)|Z]) :- zip(X,Y,Z).


	example code: HW3.pl


/* 11: Convert the "gcd" program given in exercise 3, lab 1.
      Here is a recursive mathematical definition of gcd:

      gcd of A B
         is 0 if B = 0
         is gcd B (mod A B)



       e.g.
       ?- gcd(120,222, GCD).
       GCD = 6 ;
       false.

       ?- gcd(120,0, GCD).
       GCD = 120 .

       ?- gcd(120,60, GCD).
       GCD = 60 .

*/
	gcd(A,0,A).
	gcd(0,B,B).
	gcd(A,B,R):- R1 is mod(A,B), gcd(B,R1,R).

	example code: HW3.pl
